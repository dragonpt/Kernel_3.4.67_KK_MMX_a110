#include <utils/Log.h>
#include <fcntl.h>
#include <math.h>

//#include "msdk_nvram_camera_exp.h"
//#include "msdk_sensor_exp.h"
//#include "image_sensor.h"
#include "camera_custom_nvram.h"
#include "camera_custom_sensor.h"
#include "kd_imgsensor.h"
#include "kd_imgsensor_define.h"
#include "camera_3A_para_ov2655_yuv.h"

//TODO:remove once build system ready
//#include "camera_custom_cfg.h"



//TODO: workaround before android user space custom build system ready. should be in 10W16
//TODO: remove after android user space custom build system ready. should be in 10W16
/**************************************************************************************************************
*
**************************************************************************************************************/
#define SENSOR_ID   OV2650_SENSOR_ID
#if defined(MT6516)

const NVRAM_CAMERA_DEFECT_STRUCT OV2655_YUV_CAMERA_DEFECT_DEFAULT_VALUE =
      {{ NVRAM_CAMERA_DEFECT_FILE_VERSION,3,0,0,{0},{0},{0} }};

const NVRAM_CAMERA_SHADING_STRUCT OV2655_YUV_CAMERA_SHADING_DEFAULT_VALUE =
{
    {
        NVRAM_CAMERA_SHADING_FILE_VERSION,
        OV2650_SENSOR_ID,
        0,
        0,
        318,
        332,
        {{0},{0},{0}},
        {{0},{0},{0}},
        {//preveiw SVD
            {//CCT1
                0x3B, 0x40, 0x42, 0x50, 0x3C, 0x00, 0x46, 0x00, 
                0x07, 0x08, 
                0x93, 0x00, 0x00, 0x00, 0x02, 0x3B, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xED, 0xFF, 0xFF, 0xFF, 0x02, 0xEE, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xFB, 0xFF, 0xFF, 0xFF, 0x03, 0xFB, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
                0xBB, 0x86, 0x99, 0x30, 0x37, 0x44, 0x80, 
                0x51, 0x36, 0x51, 0xC8, 0x03, 0x2A, 0x7F, 
                0x04, 0x05, 0x55, 0x3B, 0x15, 0x91, 0x7F, 
                0x03, 0x00, 0x5A, 0x00, 0x0A, 0x04, 0x7F, 
                0x4F, 0x2B, 0x2D, 0x55, 0x90, 0x37, 0x80, 
                0xA8, 0x7C, 0x00, 0x24, 0x02, 0x45, 0x7F, 
                0x9D, 0x97, 0x98, 0x83, 0x52, 0x4D, 0x4E, 0x41, 0x18, 0x15, 0x16, 0x11, 0x04, 0x02, 0x02, 0x01, 0x1A, 0x18, 0x18, 0x18, 0x5A, 0x54, 0x54, 0x53, 0xA2, 0x98, 0x97, 0x92, 
                0x35, 0x23, 0x1E, 0x22, 0x76, 0x5A, 0x5B, 0x54, 0x93, 0x8B, 0x8A, 0x7E, 0x9D, 0x9B, 0x9B, 0x8B, 0x95, 0x8C, 0x8A, 0x7E, 0x6C, 0x51, 0x56, 0x4C, 0x2F, 0x13, 0x16, 0x03, 
                0xAE, 0xBB, 0xB2, 0x9C, 0x79, 0xAB, 0x96, 0x88, 0xAC, 0xA5, 0xA1, 0x7B, 0xB5, 0x9A, 0x9A, 0x5E, 0xAC, 0x8D, 0x79, 0x47, 0xA6, 0x7D, 0x78, 0x00, 0xE3, 0x91, 0x8E, 0x4B, 
                0x11, 0x1F, 0x20, 0x05, 0x2F, 0x5B, 0x40, 0x49, 0x34, 0x2F, 0x31, 0x44, 0x2D, 0x2C, 0x2C, 0x3D, 0x3D, 0x46, 0x4E, 0x37, 0x82, 0x5A, 0x6C, 0x48, 0x72, 0x5E, 0x62, 0x1D, 
                0x1F, 0x34, 0xA8, 0x74, 0xE1, 0x63, 0x29, 0x12, 0x2D, 0x39, 0x70, 0x04, 0x48, 0x49, 0x49, 0x3B, 0x33, 0x76, 0x71, 0x45, 0x94, 0x24, 0x44, 0x55, 0x32, 0x4A, 0x5F, 0x31, 
                0x7B, 0x08, 0x70, 0x87, 0x32, 0x72, 0x45, 0x42, 0x3B, 0x42, 0x3B, 0x69, 0x6D, 0x5F, 0x5F, 0x5A, 0xA4, 0xA7, 0x74, 0x69, 0x5D, 0x78, 0x64, 0x2C, 0x33, 0xB8, 0x3E, 0x7B, 
                0x88, 0x7E, 0x7E, 0x7D, 0x81, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7E, 0x7F, 0x80, 0x7F, 0x81, 0x7F, 0x80, 0x80, 0x7F, 0x7E, 0x80, 0x7E,             
            },
            {//CCT1
                0x3B, 0x40, 0x42, 0x50, 0x3C, 0x00, 0x46, 0x00, 
                0x07, 0x08, 
                0x93, 0x00, 0x00, 0x00, 0x02, 0x3B, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xED, 0xFF, 0xFF, 0xFF, 0x02, 0xEE, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xFB, 0xFF, 0xFF, 0xFF, 0x03, 0xFB, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
                0xBB, 0x86, 0x99, 0x30, 0x37, 0x44, 0x80, 
                0x51, 0x36, 0x51, 0xC8, 0x03, 0x2A, 0x7F, 
                0x04, 0x05, 0x55, 0x3B, 0x15, 0x91, 0x7F, 
                0x03, 0x00, 0x5A, 0x00, 0x0A, 0x04, 0x7F, 
                0x4F, 0x2B, 0x2D, 0x55, 0x90, 0x37, 0x80, 
                0xA8, 0x7C, 0x00, 0x24, 0x02, 0x45, 0x7F, 
                0x9D, 0x97, 0x98, 0x83, 0x52, 0x4D, 0x4E, 0x41, 0x18, 0x15, 0x16, 0x11, 0x04, 0x02, 0x02, 0x01, 0x1A, 0x18, 0x18, 0x18, 0x5A, 0x54, 0x54, 0x53, 0xA2, 0x98, 0x97, 0x92, 
                0x35, 0x23, 0x1E, 0x22, 0x76, 0x5A, 0x5B, 0x54, 0x93, 0x8B, 0x8A, 0x7E, 0x9D, 0x9B, 0x9B, 0x8B, 0x95, 0x8C, 0x8A, 0x7E, 0x6C, 0x51, 0x56, 0x4C, 0x2F, 0x13, 0x16, 0x03, 
                0xAE, 0xBB, 0xB2, 0x9C, 0x79, 0xAB, 0x96, 0x88, 0xAC, 0xA5, 0xA1, 0x7B, 0xB5, 0x9A, 0x9A, 0x5E, 0xAC, 0x8D, 0x79, 0x47, 0xA6, 0x7D, 0x78, 0x00, 0xE3, 0x91, 0x8E, 0x4B, 
                0x11, 0x1F, 0x20, 0x05, 0x2F, 0x5B, 0x40, 0x49, 0x34, 0x2F, 0x31, 0x44, 0x2D, 0x2C, 0x2C, 0x3D, 0x3D, 0x46, 0x4E, 0x37, 0x82, 0x5A, 0x6C, 0x48, 0x72, 0x5E, 0x62, 0x1D, 
                0x1F, 0x34, 0xA8, 0x74, 0xE1, 0x63, 0x29, 0x12, 0x2D, 0x39, 0x70, 0x04, 0x48, 0x49, 0x49, 0x3B, 0x33, 0x76, 0x71, 0x45, 0x94, 0x24, 0x44, 0x55, 0x32, 0x4A, 0x5F, 0x31, 
                0x7B, 0x08, 0x70, 0x87, 0x32, 0x72, 0x45, 0x42, 0x3B, 0x42, 0x3B, 0x69, 0x6D, 0x5F, 0x5F, 0x5A, 0xA4, 0xA7, 0x74, 0x69, 0x5D, 0x78, 0x64, 0x2C, 0x33, 0xB8, 0x3E, 0x7B, 
                0x88, 0x7E, 0x7E, 0x7D, 0x81, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7E, 0x7F, 0x80, 0x7F, 0x81, 0x7F, 0x80, 0x80, 0x7F, 0x7E, 0x80, 0x7E,             
            },
            {//CCT1
                0x3B, 0x40, 0x42, 0x50, 0x3C, 0x00, 0x46, 0x00, 
                0x07, 0x08, 
                0x93, 0x00, 0x00, 0x00, 0x02, 0x3B, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xED, 0xFF, 0xFF, 0xFF, 0x02, 0xEE, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xFB, 0xFF, 0xFF, 0xFF, 0x03, 0xFB, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 
                0xBB, 0x86, 0x99, 0x30, 0x37, 0x44, 0x80, 
                0x51, 0x36, 0x51, 0xC8, 0x03, 0x2A, 0x7F, 
                0x04, 0x05, 0x55, 0x3B, 0x15, 0x91, 0x7F, 
                0x03, 0x00, 0x5A, 0x00, 0x0A, 0x04, 0x7F, 
                0x4F, 0x2B, 0x2D, 0x55, 0x90, 0x37, 0x80, 
                0xA8, 0x7C, 0x00, 0x24, 0x02, 0x45, 0x7F, 
                0x9D, 0x97, 0x98, 0x83, 0x52, 0x4D, 0x4E, 0x41, 0x18, 0x15, 0x16, 0x11, 0x04, 0x02, 0x02, 0x01, 0x1A, 0x18, 0x18, 0x18, 0x5A, 0x54, 0x54, 0x53, 0xA2, 0x98, 0x97, 0x92, 
                0x35, 0x23, 0x1E, 0x22, 0x76, 0x5A, 0x5B, 0x54, 0x93, 0x8B, 0x8A, 0x7E, 0x9D, 0x9B, 0x9B, 0x8B, 0x95, 0x8C, 0x8A, 0x7E, 0x6C, 0x51, 0x56, 0x4C, 0x2F, 0x13, 0x16, 0x03, 
                0xAE, 0xBB, 0xB2, 0x9C, 0x79, 0xAB, 0x96, 0x88, 0xAC, 0xA5, 0xA1, 0x7B, 0xB5, 0x9A, 0x9A, 0x5E, 0xAC, 0x8D, 0x79, 0x47, 0xA6, 0x7D, 0x78, 0x00, 0xE3, 0x91, 0x8E, 0x4B, 
                0x11, 0x1F, 0x20, 0x05, 0x2F, 0x5B, 0x40, 0x49, 0x34, 0x2F, 0x31, 0x44, 0x2D, 0x2C, 0x2C, 0x3D, 0x3D, 0x46, 0x4E, 0x37, 0x82, 0x5A, 0x6C, 0x48, 0x72, 0x5E, 0x62, 0x1D, 
                0x1F, 0x34, 0xA8, 0x74, 0xE1, 0x63, 0x29, 0x12, 0x2D, 0x39, 0x70, 0x04, 0x48, 0x49, 0x49, 0x3B, 0x33, 0x76, 0x71, 0x45, 0x94, 0x24, 0x44, 0x55, 0x32, 0x4A, 0x5F, 0x31, 
                0x7B, 0x08, 0x70, 0x87, 0x32, 0x72, 0x45, 0x42, 0x3B, 0x42, 0x3B, 0x69, 0x6D, 0x5F, 0x5F, 0x5A, 0xA4, 0xA7, 0x74, 0x69, 0x5D, 0x78, 0x64, 0x2C, 0x33, 0xB8, 0x3E, 0x7B, 
                0x88, 0x7E, 0x7E, 0x7D, 0x81, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7F, 0x7F, 0x7F, 0x7F, 0x80, 0x7E, 0x7F, 0x80, 0x7F, 0x81, 0x7F, 0x80, 0x80, 0x7F, 0x7E, 0x80, 0x7E,             
            },
        },
        {//capture SVD
            {//CCT1
                0x55, 0x60, 0x85, 0x50, 0x5A, 0x00, 0x87, 0x00, 
                0x07, 0x08, 
                0x89, 0x00, 0x00, 0x00, 0x02, 0x3F, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xEF, 0xFF, 0xFF, 0xFF, 0x02, 0xED, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xF3, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xC7, 0x80, 0x9B, 0x32, 0x3C, 0x3E, 0x3C, 
                0x70, 0x4F, 0x42, 0xE0, 0x4D, 0x7E, 0x50, 
                0x28, 0x23, 0x33, 0x9D, 0x06, 0x0E, 0x2D, 
                0x05, 0x03, 0x4D, 0x25, 0x15, 0x2C, 0x33, 
                0x03, 0x00, 0x4C, 0x23, 0x55, 0x5B, 0x88, 
                0x27, 0x13, 0x42, 0x2C, 0x6E, 0x88, 0x02, 
                0x6B, 0x4D, 0x2D, 0x54, 0xB9, 0x07, 0x3E, 
                0xC1, 0x88, 0x01, 0x07, 0x1B, 0x5B, 0x48, 
                0xBB, 0xB1, 0xB1, 0x9C, 0x59, 0x53, 0x53, 0x46, 0x1A, 0x17, 0x17, 0x12, 0x06, 0x04, 0x03, 0x02, 0x1E, 0x1A, 0x1A, 0x19, 0x64, 0x5C, 0x5C, 0x59, 0xC0, 0xB1, 0xB1, 0xAC, 
                0x40, 0x12, 0x18, 0x2F, 0x76, 0x5A, 0x5A, 0x56, 0x9C, 0x8E, 0x8C, 0x85, 0xA9, 0xA2, 0xA2, 0x97, 0x98, 0x90, 0x8F, 0x83, 0x6F, 0x55, 0x59, 0x4A, 0x1D, 0x02, 0x06, 0x0F, 
                0xB9, 0xCA, 0xA3, 0xB6, 0xA8, 0x91, 0x91, 0x76, 0xB1, 0xA4, 0x8D, 0x91, 0xCA, 0xA5, 0xA7, 0x7B, 0xBF, 0x97, 0x97, 0x4A, 0xA3, 0x74, 0x70, 0x04, 0xED, 0x96, 0x93, 0x72, 
                0x04, 0x6E, 0x51, 0x18, 0x60, 0x8F, 0x8F, 0x89, 0x47, 0x5E, 0x64, 0x6B, 0x69, 0x77, 0x5F, 0x56, 0x77, 0x6C, 0x58, 0x49, 0x97, 0x8E, 0x9B, 0x63, 0xA3, 0x79, 0x84, 0x31, 
                0x8D, 0x4F, 0x32, 0x04, 0x79, 0x56, 0x56, 0x5E, 0x3E, 0x3C, 0x40, 0x10, 0x27, 0x33, 0x3B, 0x44, 0x26, 0x43, 0x42, 0x4A, 0x29, 0x35, 0x3E, 0x50, 0x5F, 0x2B, 0x26, 0x19, 
                0x24, 0xAE, 0xD3, 0x20, 0x48, 0x49, 0x49, 0x8D, 0x66, 0x6F, 0x77, 0x9C, 0x66, 0x8D, 0x86, 0x92, 0x3A, 0x6B, 0x48, 0x53, 0x05, 0x17, 0x1C, 0x85, 0x6C, 0x6F, 0x59, 0x41, 
                0x37, 0x38, 0x52, 0x4B, 0x8F, 0x58, 0x58, 0x46, 0x5A, 0x90, 0x95, 0x65, 0x62, 0x42, 0x3F, 0x55, 0x77, 0x61, 0x50, 0x5A, 0x39, 0x7E, 0x3C, 0x6A, 0xA4, 0x91, 0x07, 0xAB,             
            },
            {//CCT1
                0x55, 0x60, 0x85, 0x50, 0x5A, 0x00, 0x87, 0x00, 
                0x07, 0x08, 
                0x89, 0x00, 0x00, 0x00, 0x02, 0x3F, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xEF, 0xFF, 0xFF, 0xFF, 0x02, 0xED, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xF3, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xC7, 0x80, 0x9B, 0x32, 0x3C, 0x3E, 0x3C, 
                0x70, 0x4F, 0x42, 0xE0, 0x4D, 0x7E, 0x50, 
                0x28, 0x23, 0x33, 0x9D, 0x06, 0x0E, 0x2D, 
                0x05, 0x03, 0x4D, 0x25, 0x15, 0x2C, 0x33, 
                0x03, 0x00, 0x4C, 0x23, 0x55, 0x5B, 0x88, 
                0x27, 0x13, 0x42, 0x2C, 0x6E, 0x88, 0x02, 
                0x6B, 0x4D, 0x2D, 0x54, 0xB9, 0x07, 0x3E, 
                0xC1, 0x88, 0x01, 0x07, 0x1B, 0x5B, 0x48, 
                0xBB, 0xB1, 0xB1, 0x9C, 0x59, 0x53, 0x53, 0x46, 0x1A, 0x17, 0x17, 0x12, 0x06, 0x04, 0x03, 0x02, 0x1E, 0x1A, 0x1A, 0x19, 0x64, 0x5C, 0x5C, 0x59, 0xC0, 0xB1, 0xB1, 0xAC, 
                0x40, 0x12, 0x18, 0x2F, 0x76, 0x5A, 0x5A, 0x56, 0x9C, 0x8E, 0x8C, 0x85, 0xA9, 0xA2, 0xA2, 0x97, 0x98, 0x90, 0x8F, 0x83, 0x6F, 0x55, 0x59, 0x4A, 0x1D, 0x02, 0x06, 0x0F, 
                0xB9, 0xCA, 0xA3, 0xB6, 0xA8, 0x91, 0x91, 0x76, 0xB1, 0xA4, 0x8D, 0x91, 0xCA, 0xA5, 0xA7, 0x7B, 0xBF, 0x97, 0x97, 0x4A, 0xA3, 0x74, 0x70, 0x04, 0xED, 0x96, 0x93, 0x72, 
                0x04, 0x6E, 0x51, 0x18, 0x60, 0x8F, 0x8F, 0x89, 0x47, 0x5E, 0x64, 0x6B, 0x69, 0x77, 0x5F, 0x56, 0x77, 0x6C, 0x58, 0x49, 0x97, 0x8E, 0x9B, 0x63, 0xA3, 0x79, 0x84, 0x31, 
                0x8D, 0x4F, 0x32, 0x04, 0x79, 0x56, 0x56, 0x5E, 0x3E, 0x3C, 0x40, 0x10, 0x27, 0x33, 0x3B, 0x44, 0x26, 0x43, 0x42, 0x4A, 0x29, 0x35, 0x3E, 0x50, 0x5F, 0x2B, 0x26, 0x19, 
                0x24, 0xAE, 0xD3, 0x20, 0x48, 0x49, 0x49, 0x8D, 0x66, 0x6F, 0x77, 0x9C, 0x66, 0x8D, 0x86, 0x92, 0x3A, 0x6B, 0x48, 0x53, 0x05, 0x17, 0x1C, 0x85, 0x6C, 0x6F, 0x59, 0x41, 
                0x37, 0x38, 0x52, 0x4B, 0x8F, 0x58, 0x58, 0x46, 0x5A, 0x90, 0x95, 0x65, 0x62, 0x42, 0x3F, 0x55, 0x77, 0x61, 0x50, 0x5A, 0x39, 0x7E, 0x3C, 0x6A, 0xA4, 0x91, 0x07, 0xAB,             
            },
            {//CCT1
                0x55, 0x60, 0x85, 0x50, 0x5A, 0x00, 0x87, 0x00, 
                0x07, 0x08, 
                0x89, 0x00, 0x00, 0x00, 0x02, 0x3F, 0x00, 0x00, 0x00, 0x02, 
                0xDF, 0xFF, 0xFF, 0xFF, 0x01, 0xEA, 0xFF, 0xFF, 0xFF, 0x02, 
                0xEF, 0xFF, 0xFF, 0xFF, 0x02, 0xED, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF6, 0xFF, 0xFF, 0xFF, 0x03, 0xF3, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xF8, 0xFF, 0xFF, 0xFF, 0x03, 
                0xF7, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xF8, 0xFF, 0xFF, 0xFF, 0x03, 0xFA, 0xFF, 0xFF, 0xFF, 0x04, 
                0xC7, 0x80, 0x9B, 0x32, 0x3C, 0x3E, 0x3C, 
                0x70, 0x4F, 0x42, 0xE0, 0x4D, 0x7E, 0x50, 
                0x28, 0x23, 0x33, 0x9D, 0x06, 0x0E, 0x2D, 
                0x05, 0x03, 0x4D, 0x25, 0x15, 0x2C, 0x33, 
                0x03, 0x00, 0x4C, 0x23, 0x55, 0x5B, 0x88, 
                0x27, 0x13, 0x42, 0x2C, 0x6E, 0x88, 0x02, 
                0x6B, 0x4D, 0x2D, 0x54, 0xB9, 0x07, 0x3E, 
                0xC1, 0x88, 0x01, 0x07, 0x1B, 0x5B, 0x48, 
                0xBB, 0xB1, 0xB1, 0x9C, 0x59, 0x53, 0x53, 0x46, 0x1A, 0x17, 0x17, 0x12, 0x06, 0x04, 0x03, 0x02, 0x1E, 0x1A, 0x1A, 0x19, 0x64, 0x5C, 0x5C, 0x59, 0xC0, 0xB1, 0xB1, 0xAC, 
                0x40, 0x12, 0x18, 0x2F, 0x76, 0x5A, 0x5A, 0x56, 0x9C, 0x8E, 0x8C, 0x85, 0xA9, 0xA2, 0xA2, 0x97, 0x98, 0x90, 0x8F, 0x83, 0x6F, 0x55, 0x59, 0x4A, 0x1D, 0x02, 0x06, 0x0F, 
                0xB9, 0xCA, 0xA3, 0xB6, 0xA8, 0x91, 0x91, 0x76, 0xB1, 0xA4, 0x8D, 0x91, 0xCA, 0xA5, 0xA7, 0x7B, 0xBF, 0x97, 0x97, 0x4A, 0xA3, 0x74, 0x70, 0x04, 0xED, 0x96, 0x93, 0x72, 
                0x04, 0x6E, 0x51, 0x18, 0x60, 0x8F, 0x8F, 0x89, 0x47, 0x5E, 0x64, 0x6B, 0x69, 0x77, 0x5F, 0x56, 0x77, 0x6C, 0x58, 0x49, 0x97, 0x8E, 0x9B, 0x63, 0xA3, 0x79, 0x84, 0x31, 
                0x8D, 0x4F, 0x32, 0x04, 0x79, 0x56, 0x56, 0x5E, 0x3E, 0x3C, 0x40, 0x10, 0x27, 0x33, 0x3B, 0x44, 0x26, 0x43, 0x42, 0x4A, 0x29, 0x35, 0x3E, 0x50, 0x5F, 0x2B, 0x26, 0x19, 
                0x24, 0xAE, 0xD3, 0x20, 0x48, 0x49, 0x49, 0x8D, 0x66, 0x6F, 0x77, 0x9C, 0x66, 0x8D, 0x86, 0x92, 0x3A, 0x6B, 0x48, 0x53, 0x05, 0x17, 0x1C, 0x85, 0x6C, 0x6F, 0x59, 0x41, 
                0x37, 0x38, 0x52, 0x4B, 0x8F, 0x58, 0x58, 0x46, 0x5A, 0x90, 0x95, 0x65, 0x62, 0x42, 0x3F, 0x55, 0x77, 0x61, 0x50, 0x5A, 0x39, 0x7E, 0x3C, 0x6A, 0xA4, 0x91, 0x07, 0xAB,             
            }
        },
        {0},
        {0} 
    }
};

const NVRAM_CAMERA_PARA_STRUCT OV2655_YUV_CAMERA_PARA_DEFAULT_VALUE=
{
    //Version
    NVRAM_CAMERA_PARA_FILE_VERSION,
    //SensorId
    OV2650_SENSOR_ID,

    {//ISP_COMMON_PARA_STRUCT  ISPComm;
        {// 0~30 reserve for compatiblilty with WCP1 setting  
         // [31] for table defect control 0x0154h  Enable :0x010000 disable : 0
         // [32] for defect table address 0x0158h
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    	}
    },
    {//ISP_TUNING_PARA_STRUCT  ISPTuning;
        {//ISP_TUNING_INDEX_STRUCT Idx
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        },
        {//ShadingReg
            {//00 Preview
        	0,0,0,0,0,0,0x10000000, 0x5042403B, 0x40001950, 0x0046003C, 0x20202020
            },
            {//01 Capture
        	0,0,0,0,0,0,0x10000000, 0x50856055, 0x40001950, 0x0087005A, 0x20202020
            },
            {//02
        	0,0,0,0,0,0,0,0,0,0,0
            }        
        },
        {//NR1
#if 1        
            {//00 Capture ISO100/ISO200
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00069050, 0x0000069E,
                0x01010202, 0x02030303, 0x01020202, 0x03030304, 0x01020202, 0x03030304, 0x01020202, 0x03030304
            },
            {//01 Capture ISO400
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00079050, 0x000007BF,
                0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B
            },
            {//02 Capture ISO800
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00079050, 0x000007BF,
                0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10
            },
            {//03 Preview ISO200 ISO400
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x000009BD,
                0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E
            },
            {//04 Preview ISO800
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x000008BD,
                0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10
            },
            {//05 Capture ISO1600
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00089050, 0x00000DEF,
                0x26262626, 0x20222426, 0x26262626, 0x20222426, 0x26262626, 0x20222426, 0x26262626, 0x20222426
            },
            {//06 Preview ISO1600
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x00000DEF,
                0x28282828, 0x22242628, 0x28282828, 0x22242628, 0x28282828, 0x22242628, 0x28282828, 0x22242628
            }
#else
            {//00 Capture ISO100/ISO200
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00069050, 0x0000069E,
                0x01010202, 0x02030303, 0x01020202, 0x03030304, 0x01020202, 0x03030304, 0x01020202, 0x03030304
            },
            {//01 Capture ISO400
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00079050, 0x000007BF,
                0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B, 0x03030506, 0x070B0B0B
            },
            {//02 Capture ISO800
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00079050, 0x000007BF,
                0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10, 0x0505080A, 0x0B0D0F10
            },
            {//03 Preview ISO200 ISO400
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x000009BD,
                0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E, 0x0B090908, 0x090B0C0E
            },
            {//04 Preview ISO800
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x000008BD,
                0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10, 0x0C0B0A0A, 0x0B0D0E10
            },
            {//05 Capture ISO1600
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00089050, 0x00000DEF,
                0x090A0B0D, 0x0F111315, 0x090A0B0D, 0x0F111315, 0x090A0B0D, 0x0F111315, 0x090A0B0D, 0x0F111315
            },
            {//06 Preview ISO1600
                0x000000F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000C8, 0x00089078, 0x00000DEF,
                0x0C0E0E0E, 0x0E121218, 0x0C0E0E0E, 0x0E121218, 0x0C0E0E0E, 0x0E121218, 0x0C0E0E0E, 0x0E121218
            }
#endif 
        },
        {//NR2
#if 0        
            {//00
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//01
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//02
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//03
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//04
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//05
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//06
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            }
#else
            {//00
                0x00000003, 0x00914488, 0x02040506, 0x02040506
            },
            {//01
                0x00000003, 0x00942200, 0x03050707, 0x03050707
            },
            {//02
                0x00000003, 0x00942288, 0x080A0C0C, 0x080A0C0C
            },
            {//03
                0x00000003, 0x009C3388, 0x06080A0A, 0x06080A0A
            },
            {//04
                0x00000003, 0x00A44488, 0x06080A0A, 0x06080A0A
            },
            {//05
                0x00000003, 0x00A44488, 0x080A0C0C, 0x10101010
            },
            {//06
                0x00000003, 0x00A44488, 0x0A0C0E0E, 0x10101010
            }
#endif               
        },
        {//EE
            {//00 no one use this parameter, this is Min EE
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0xd001011d, 0x00302010, 0x04030201
            },
            {//01 all preview EE parameter
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x70080115, 0x00302010, 0x0e0a0804
            },
            {//02 Capture ISO1600
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x70080115, 0x00302010, 0x18141008
            },
            {//03 Capture ISO800 same as ISO400
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x805f1f1d, 0x00302010, 0x12151006
            },
            {//04 Capture ISO200
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x8045351d, 0x00302010, 0x161f1408
            },
            {//05 Capture ISO100
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x70080115, 0x00302010, 0x18141008
            },
            {//06 no one use this parameter, this is Max EE
                0x081f0814, 0x01030332, 0x010f000f, 0x32800707, 0x181f0232, 0x00000008, 0x8055451d, 0x00302010, 0x1f221814
            }
        },
        {//Auto Defect
            {//00
                0x00000001, 0x50285050, 0x006003A0, 0x00300050, 0x000008B7,0,0,0,0,0,0,0,0,0,0,0
            },
            {//01
                0x00000001, 0x50285050, 0x006003A0, 0x00300050, 0x000008B7,0,0,0,0,0,0,0,0,0,0,0
            },
            {//02
                0x00000001, 0x50285050, 0x006003A0, 0x00300050, 0x000008B7,0,0,0,0,0,0,0,0,0,0,0
            }
        },
        {//YCCGO saturation
         //Org value
            {//00
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x081E1E1E, 0x080A0000, 0xFF000040, 0xFF00FF00
                0x00000001, 0x00000000, 0x1020e0f0, 0x081e1e1e, 0x08000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//01
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x0A282828, 0x0A0A0000, 0xFF000040, 0xFF00FF00
             	  0x00000001, 0x00000000, 0x1020e0f0, 0x0a282828, 0x0a000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//02
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x12323432, 0x120A0000, 0xFF000040, 0xFF00FF00
                0x00000001, 0x00000000, 0x1020e0f0, 0x12323432, 0x12000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//03
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x20464846, 0x200A0000, 0xFF000040, 0xFF00FF00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
                //                                       0x1020E0F0, 0x20464846, 0x200A0000
                //                                                                              0x40000000, 0xFF000040
               0x00000001, 0x00000000, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//04
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x245A5C5A, 0x240A0000, 0xFF000040, 0xFF00FF00
                0x00000001, 0x00000000, 0x1020e0f0, 0x245a5c5a, 0x24000000, 0xff000000, 0xff00ff00,
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//05
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x284C4E4C, 0x240A0000, 0xFF000040, 0xFF00FF00
                0x00000001, 0x00000000, 0x1020e0f0, 0x284c4e4c, 0x24000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            },
            {//06
                //0x00000009, 0x80807F01, 0x1020E0F0, 0x284C4E4C, 0x240A0000, 0xFF000040, 0xFF00FF00
                0x00000001, 0x00000000, 0x1020e0f0, 0x284c4e4c, 0x24000000, 0xff000000, 0xff00ff00
                //0x00000009, 0x80807f01, 0x1020e0f0, 0x20464846, 0x20000000, 0xff000040, 0xff00ff00
            }
        },
        {//YCCGO Contrast
            {//00
                0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff00003b, 0xff00ff00
            },
            {//01
                0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000040, 0xff00ff00
            },
            {//02
                0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff000045, 0xff00ff00
            }
        },
        {//CCM
#if 0
            {//00
                //0x00339805, 0x0087368F, 0x00838C2F
                0x002e8c82, 0x008a388e, 0x0089862f	
            },
            {//01
                //0x00339805, 0x0087368F, 0x00838C2F
                0x002e8c82, 0x008a388e, 0x0089862f	
            },
            {//02
                //0x00339805, 0x0087368F, 0x00838C2F
                0x002e8c82, 0x008a388e, 0x0089862f	                	
            }
#else
            {//00
                0x002e8c82, 0x008a388e, 0x0089862f	
                //0x00200000, 0x00002000, 0x00000020	
            },
            {//01
                0x002e8c82, 0x008a388e, 0x0089862f	
                //0x00200000, 0x00002000, 0x00000020	
            },
            {//02
                //0x00339805, 0x0087368F, 0x00838C2F
                //0x001b0104, 0x00872982, 0x008a8630
                0x00200000, 0x00002000, 0x00000020	
            }
#endif                
        },

        {//Gamma
            {//00
                //0x34241404, 0x72645544, 0xab9e9182, 0xd7cdc2b7, 0xfaf3ebe3
                0x46321e09, 0x8c7c6b59, 0xbfb4a79a, 0xe6ddd3ca, 0xf8f7f2ed
            },
            {//01
                //0x34241404, 0x72645544, 0xab9e9182, 0xd7cdc2b7, 0xfaf3ebe3
                0x46321e09, 0x8c7c6b59, 0xbfb4a79a, 0xe6ddd3ca, 0xf8f7f2ed
            },
            {//02
                0x46321e09, 0x8c7c6b59, 0xbfb4a79a, 0xe6ddd3ca, 0xf8f7f2ed
            },
            {//03
                //0x553f280c, 0xa08f7d69, 0xd7cabeaf, 0xf6f0eae1, 0xfffefdfa
                0x46321e09, 0x8c7c6b59, 0xbfb4a79a, 0xe6ddd3ca, 0xf8f7f2ed
            },
            {//04
                //0x553f280c, 0xa08f7d69, 0xd7cabeaf, 0xf6f0eae1, 0xfffefdfa
                0x46321e09, 0x8c7c6b59, 0xbfb4a79a, 0xe6ddd3ca, 0xf8f7f2ed
            },                  
        }
    },
    {//SHUTTER_DELAY_STRUCT MShutter;
        0, 0
    },
    {
        0
    }
};

const NVRAM_CAMERA_3A_STRUCT OV2655_YUV_CAMERA_3A_NVRAM_DEFAULT_VALUE=
{
	NVRAM_CAMERA_3A_FILE_VERSION, // u4Version
	OV2650_SENSOR_ID, // SensorId

    // AE NVRAM
	{
        // rDevicesInfo
		{
            1195,   // u4MinGain, 1024 base =  1x
            16384,  // u4MaxGain, 16x
            70,     // u4MiniISOGain, ISOxx
            128,    // u4GainStepUnit, 1x/8
            31,     // u4PreExpUnit
            30,     // u4PreMaxFrameRate
            31,     // u4VideoExpUnit
            30,     // u4VideoMaxFrameRate
            1024,   // u4Video2PreRatio, 1024 base = 1x
            58,     // u4CapExpUnit
            30,     // u4CapMaxFrameRate
            1024,   // u4Cap2PreRatio, 1024 base = 1x
            28      // u4LensFno, Fno = 2.8
		},
	    // rHistConfig
		{
            2,   // u4HistHighThres
            40,  // u4HistLowThres
            2,   // u4MostBrightRatio
            1,   // u4MostDarkRatio
            160, // u4CentralHighBound
            20,  // u4CentralLowBound
			{240, 230, 220, 210, 200}, // u4OverExpThres[AE_CCT_STRENGTH_NUM]
			{86, 108, 128, 148, 170},  // u4HistStretchThres[AE_CCT_STRENGTH_NUM]
			{18, 22, 26, 30, 34}       // u4BlackLightThres[AE_CCT_STRENGTH_NUM]
		},
        // rCCTConfig
		{
		    TRUE,            // bEnableBlackLight
            TRUE,            // bEnableHistStretch
            FALSE,           // bEnableAntiOverExposure
            TRUE,            // bEnableTimeLPF
            TRUE,            // bEnableCaptureThres
            47,              // u4AETarget
            20,              // u4InitIndex
            4,               // u4BackLightWeight
            32,              // u4HistStretchWeight
            4,               // u4AntiOverExpWeight
            2,               // u4BlackLightStrengthIndex
            2,               // u4HistStretchStrengthIndex
            2,               // u4AntiOverExpStrengthIndex
            2,               // u4TimeLPFStrengthIndex
			{3, 4, 5, 6, 7}, // u4LPFConvergeTable[AE_CCT_STRENGTH_NUM]
            90,              // u4InDoorEV = 9.0, 10 base
            -23,               // u4BVOffset delta BV = -2.3
            4,               // u4PreviewFlareOffset
            0,               // u4CaptureFlareOffset
            5,                // u4CaptureFlareThres
            8                 // u4MaxCaptureFlareThres
		}
	},

    // AWB NVRAM
    {								
	    // AWB calibration data							
	    {							
		    // rCalGain (calibration gain: 1.0 = 512)						
		    {						
			    0,	// u4R				
			    0,	// u4G				
			    0	// u4B				
		    },						
		    // rDefGain (Default calibration gain: 1.0 = 512)						
		    {						
				0,	// u4R
				0,	// u4G
				0	// u4B
			},
			// rD65Gain (D65 WB gain: 1.0 = 512)
			{
				826, // u4R
				512, // u4G
				588	 // u4B
		    }						
	    },							
	    // Original XY coordinate of AWB light source							
	    {							
		    // Horizon						
    		{						
    			-281,	// i4X				
    			-120	// i4Y				
    		},						
    		// A						
    		{						
    			-204,	// i4X				
    			-164	// i4Y				
    		},						
    		// TL84						
    		{						
    			-65,	// i4X				
    			-209	// i4Y				
    		},						
    		// CWF						
    		{						
    			-45,	// i4X				
    			-267	// i4Y				
    		},						
    		// DNP						
    		{						
    			92,	// i4X				
    			-318	// i4Y				
    		},						
    		// D65						
    		{						
    			147,	// i4X				
    			-268	// i4Y				
    		},						
    		// D75						
    		{						
    			272,	// i4X				
    			-300	// i4Y				
    		}						
    	},							
    	// Rotated XY coordinate of AWB light source							
    	{							
    		// Horizon						
    		{						
    			-230,	// i4X				
    			-202	// i4Y				
    		},						
    		// A						
    		{						
    			-143,	// i4X				
    			-220	// i4Y				
    		},						
    		// TL84						
    		{						
    			3,	// i4X				
    			-220	// i4Y				
    		},						
    		// CWF						
    		{						
    			41,	// i4X				
    			-269	// i4Y				
    		},						
    		// DNP						
    		{						
    			187,	// i4X				
    			-274	// i4Y				
    		},						
    		// D65						
    		{						
    			224,	// i4X				
    			-210	// i4Y				
    		},						
    		// D75						
    		{						
    			353,	// i4X				
    			-201	// i4Y				
    		}						
    	},							
    	// Rotation matrix parameter							
    	{							
    		-18,	// i4RotationAngle					
    		122,	// i4H11					
    		-40,	// i4H12					
    		40,	// i4H21					
    		122	// i4H22					
    	},							
    	// Daylight locus parameter							
    	{							
    		-66,	// i4SlopeNumerator					
    		128	// i4SlopeDenominator					
    	},							
    	// AWB light area							
    	{							
    		// Tungsten						
    		{						
    			-47,	// i4RightBound				
    			-697,	// i4LeftBound				
    			-161,	// i4UpperBound				
    			-261	// i4UpperBound				
    		},						
    		// Warm fluorescent						
    		{						
    			-47,	// i4RightBound				
    			-697,	// i4LeftBound				
    			-261,	// i4UpperBound				
    			-381	// i4UpperBound				
    		},						
    		// Fluorescent						
    		{						
    			137,	// i4RightBound				
    			-47,	// i4LeftBound				
    			-155,	// i4UpperBound				
    			-245	// i4UpperBound				
    		},						
    		// CWF						
    		{						
    			137,	// i4RightBound				
    			-47,	// i4LeftBound				
    			-245,	// i4UpperBound				
    			-319	// i4UpperBound				
    		},						
    		// Daylight						
    		{						
    			289,	// i4RightBound				
    			137,	// i4LeftBound				
    			-130,	// i4UpperBound				
    			-299	// i4UpperBound				
    		},						
    		// Shade						
    		{						
    			649,	// i4RightBound				
    			289,	// i4LeftBound				
    			-121,	// i4UpperBound				
    			-281	// i4UpperBound				
    		}						
    	},							
    	// PWB light area							
    	{							
    		// Reference area						
    		{						
    			649,	// i4RightBound				
    			-697,	// i4LeftBound				
    			-121,	// i4UpperBound				
    			-381	// i4UpperBound				
    		},						
    		// Daylight						
    		{						
    			289,	// i4RightBound				
    			137,	// i4LeftBound				
    			-130,	// i4UpperBound				
    			-299	// i4UpperBound				
    		},						
    		// Cloudy daylight						
    		{						
    			433,	// i4RightBound				
    			289,	// i4LeftBound				
    			-121,	// i4UpperBound				
    			-281	// i4UpperBound				
    		},						
    		// Shade						
    		{						
    			593,	// i4RightBound				
    			433,	// i4LeftBound				
    			-121,	// i4UpperBound				
    			-281	// i4UpperBound				
    		},						
    		// Twilight						
    		{						
    			137,	// i4RightBound				
    			-23,	// i4LeftBound				
    			-130,	// i4UpperBound				
    			-299	// i4UpperBound				
    		},						
    		// Fluorescent						
    		{						
    			274,	// i4RightBound				
    			-47,	// i4LeftBound				
    			-170,	// i4UpperBound				
    			-319	// i4UpperBound				
    		},						
    		// Warm fluorescent						
    		{						
    			-47,	// i4RightBound				
    			-193,	// i4LeftBound				
    			-170,	// i4UpperBound				
    			-319	// i4UpperBound				
    		},						
    		// Incandescent						
    		{						
    			-47,	// i4RightBound				
    			-193,	// i4LeftBound				
    			-130,	// i4UpperBound				
    			-299	// i4UpperBound				
    		},						
    	},							
    	// PWB default gain							
    	{							
    		// Daylight						
    		{						
    			816,	// u4R				
    			512,	// u4G				
    			598	// u4B				
    		},						
    		// Cloudy daylight						
    		{						
    			1001,	// u4R				
    			512,	// u4G				
    			526	// u4B				
    		},						
    		// Shade						
    		{						
    			1247,	// u4R				
    			512,	// u4G				
    			470	// u4B				
    		},						
    		// Twilight						
    		{						
    			651,	// u4R				
    			512,	// u4G				
    			670	// u4B				
    		},						
    		// Fluorescent						
    		{						
    			722,	// u4R				
    			512,	// u4G				
    			671	// u4B				
    		},						
    		// Warm fluorescent						
    		{						
    			515,	// u4R				
    			512,	// u4G				
    			797	// u4B				
    		},						
    		// Incandescent						
    		{						
    			504,	// u4R				
    			512,	// u4G				
    			763	// u4B				
    		}						
    	},							
    	// AWB preference color							
    	{							
    		// Tungsten						
    		{						
    			50,	// i4SliderValue				
    			3296	// i4OffsetThr				
    		},						
    		// Warm fluorescent						
    		{						
    			50,	// i4SliderValue				
    			3296	// i4OffsetThr				
    		},						
    		// Shade						
    		{						
    			50,	// i4SliderValue				
    			791	// i4OffsetThr				
    		},						
    		// Daylight WB gain						
    		{						
    			783,	// u4R				
    			512,	// u4G				
    			605	// u4B				
    		}						
    	},							
    	// CCT estimation							
    	{							
    		// CCT						
    		{						
    			2400,	// i4CCT[0]				
    			2850,	// i4CCT[1]				
    			4100,	// i4CCT[2]				
    			5100,	// i4CCT[3]				
    			6500,	// i4CCT[4]				
    			7500	// i4CCT[5]				
    		},						
    		// Rotated X coordinate						
    		{						
    			-454,	// i4RotatedXCoordinate[0]				
    			-367,	// i4RotatedXCoordinate[1]				
    			-221,	// i4RotatedXCoordinate[2]				
    			-37,	// i4RotatedXCoordinate[3]				
    			0,	// i4RotatedXCoordinate[4]				
    			129	// i4RotatedXCoordinate[5]				
    		}						
    	}							
    },								
	{0}
};


UINT32 OV2655_YUV_getDefaultData(CAMERA_DATA_TYPE_ENUM CameraDataType, VOID *pDataBuf, UINT32 size)
{
UINT32 dataSize[CAMERA_DATA_TYPE_NUM] = {sizeof(NVRAM_CAMERA_PARA_STRUCT),
                                         sizeof(NVRAM_CAMERA_3A_STRUCT),
                                         sizeof(NVRAM_CAMERA_SHADING_STRUCT),
                                         sizeof(NVRAM_CAMERA_DEFECT_STRUCT),
                                         sizeof(NVRAM_SENSOR_DATA_STRUCT),
                                         sizeof(NVRAM_LENS_PARA_STRUCT),
                                         sizeof(AAA_PARAM_T),
                                         sizeof(AAA_STAT_CONFIG_PARAM_T)};

    if (CameraDataType > CAMERA_DATA_3A_STAT_CONFIG_PARA || NULL == pDataBuf || (size < dataSize[CameraDataType]))
    {
        return 1;
    }

    switch(CameraDataType)
    {
        case CAMERA_NVRAM_DATA_PARA:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_PARA_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_PARA_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_3A:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_3A_NVRAM_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_3A_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_SHADING:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_SHADING_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_SHADING_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_DEFECT:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_DEFECT_DEFAULT_VALUE,sizeof(NVRAM_CAMERA_DEFECT_STRUCT));
            break;
        case CAMERA_NVRAM_DATA_SENSOR:
            break;
        case CAMERA_DATA_3A_PARA:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_3A_PARA,sizeof(AAA_PARAM_T));
            break;
        case CAMERA_DATA_3A_STAT_CONFIG_PARA:
            memcpy(pDataBuf,&OV2655_YUV_CAMERA_3A_STAT_CONFIG_PARAM,sizeof(AAA_STAT_CONFIG_PARAM_T));
            break;
        default:
            break;
    }
    return 0;
}//

#endif  //  defined(MT6516)

typedef NSFeature::YUVSensorInfo<SENSOR_ID> SensorInfoSingleton_T;
namespace NSFeature {
template <>
UINT32
SensorInfoSingleton_T::
impGetDefaultData(CAMERA_DATA_TYPE_ENUM const CameraDataType, VOID*const pDataBuf, UINT32 const size) const
{
#if defined(MT6516)
    return  OV2655_YUV_getDefaultData(CameraDataType, pDataBuf, size);
#else
    return  NULL;
#endif  //  defined(MT6516)
}};  //  NSFeature

//PFUNC_GETCAMERADEFAULT pOV2655_YUV_getDefaultData = OV2655_YUV_getDefaultData;



